name: PR Validation Suite

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]  # Also run on main for baseline updates

env:
  # Test configuration
  BATS_VERSION: "1.10.0"
  YQ_VERSION: "v4.35.2"

jobs:

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install yq
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

          # Install jq and bc
          sudo apt-get update
          sudo apt-get install -y jq bc

          # Install BATS
          sudo apt-get install -y bats

      - name: Run schema validation tests
        run: |
          echo "üîç Running schema validation tests..."
          bats tests/integration/schema_validation_test.bats --tap
          echo "‚úÖ Schema validation tests completed"

      - name: Run workflow integration tests
        run: |
          echo "üîó Running workflow integration tests..."
          bats tests/integration/workflow_integration_test.bats --tap || true
          echo "‚ÑπÔ∏è  Workflow integration tests completed (some may skip due to missing functions)"

  # =============================================================================
  # PERFORMANCE TESTS
  # =============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install yq
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

          # Install jq and bc
          sudo apt-get update
          sudo apt-get install -y jq bc time

          # Install BATS
          sudo apt-get install -y bats

      - name: Run performance tests
        run: |
          echo "‚ö° Running performance tests..."
          bats tests/performance/**/*.bats --tap
          echo "‚úÖ Performance tests completed"

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            **/performance_results/
            local_test_report.txt
          retention-days: 7

  # =============================================================================
  # VALIDATION TESTS (CI/CD Safe)
  # =============================================================================
  validation-tests:
    name: Configuration Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install yq
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

          # Install jq
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Validate schema files
        run: |
          echo "üìã Validating JSON schema..."
          if [ -f "schemas/homelab-schema.json" ]; then
            jq . schemas/homelab-schema.json >/dev/null
            echo "‚úÖ JSON schema is valid"
          fi

      - name: Validate example configurations
        run: |
          echo "üìù Validating example configurations..."
          for config in examples/*.yaml; do
            if [ -f "$config" ]; then
              echo "Validating $config..."
              if [ -f "scripts/simple_homelab_validator.sh" ]; then
                timeout 30 scripts/simple_homelab_validator.sh "$config" || echo "‚ö†Ô∏è  Validation timeout or error for $config"
              else
                yq . "$config" >/dev/null && echo "‚úÖ YAML syntax valid: $config"
              fi
            fi
          done

      - name: Validate test fixtures
        run: |
          echo "üß™ Validating test fixtures..."
          for config in tests/fixtures/configs/valid_*.yaml; do
            if [ -f "$config" ]; then
              echo "Validating $config..."
              yq . "$config" >/dev/null && echo "‚úÖ YAML syntax valid: $config"
            fi
          done

  # =============================================================================
  # DOCKER COMPOSE VALIDATION (No Deployment)
  # =============================================================================
  docker-compose-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install yq
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

          # Install Docker Compose
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Test Docker Compose generation
        run: |
          echo "üê≥ Testing Docker Compose generation..."

          # Test with example configuration
          if [ -f "examples/homelab-basic.yaml" ] && [ -f "scripts/translate_homelab_to_compose.sh" ]; then
            echo "Testing translation engine..."

            # Source the script
            source scripts/translate_homelab_to_compose.sh

            # Generate bundles
            export OUTPUT_DIR="test_output"
            mkdir -p "$OUTPUT_DIR"

            if generate_all_bundles "examples/homelab-basic.yaml" "$OUTPUT_DIR"; then
              echo "‚úÖ Bundle generation successful"

              # Validate generated compose files
              for compose_file in "$OUTPUT_DIR"/*/docker-compose.yaml; do
                if [ -f "$compose_file" ]; then
                  echo "Validating $compose_file..."
                  docker compose -f "$compose_file" config --quiet && echo "‚úÖ Valid Docker Compose file: $compose_file"
                fi
              done
            else
              echo "‚ö†Ô∏è  Bundle generation failed or not available"
            fi
          else
            echo "‚ö†Ô∏è  Translation script or example config not available"
          fi

  # =============================================================================
  # NGINX CONFIGURATION VALIDATION
  # =============================================================================
  nginx-validation:
    name: Nginx Configuration Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install yq and nginx
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update
          sudo apt-get install -y nginx

      - name: Test Nginx configuration generation
        run: |
          echo "üåê Testing Nginx configuration generation..."

          if [ -f "scripts/translate_homelab_to_compose.sh" ] && [ -f "examples/homelab-basic.yaml" ]; then
            # Source the script
            source scripts/translate_homelab_to_compose.sh

            # Generate bundles with Nginx configs
            export OUTPUT_DIR="nginx_test_output"
            mkdir -p "$OUTPUT_DIR"

            if generate_all_bundles "examples/homelab-basic.yaml" "$OUTPUT_DIR"; then
              # Test Nginx configurations
              for nginx_conf in "$OUTPUT_DIR"/*/nginx/nginx.conf; do
                if [ -f "$nginx_conf" ]; then
                  echo "Testing Nginx config: $nginx_conf"

                  # Create test environment
                  test_dir=$(mktemp -d)
                  cp "$nginx_conf" "$test_dir/nginx.conf"
                  mkdir -p "$test_dir/conf.d" "$test_dir/logs"
                  touch "$test_dir/mime.types"

                  # Test syntax
                  nginx -t -c "$test_dir/nginx.conf" -p "$test_dir" && echo "‚úÖ Valid Nginx config: $nginx_conf"

                  # Cleanup
                  rm -rf "$test_dir"
                fi
              done
            else
              echo "‚ö†Ô∏è  Bundle generation failed or not available"
            fi
          else
            echo "‚ö†Ô∏è  Translation script or example config not available"
          fi

  # =============================================================================
  # TEST SUMMARY
  # =============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, validation-tests, docker-compose-validation, nginx-validation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate test summary
        run: |
          echo "üìä Integration and Performance Test Summary"
          echo "=========================================="
          echo ""
          echo "Job Results:"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- Performance Tests: ${{ needs.performance-tests.result }}"
          echo "- Validation Tests: ${{ needs.validation-tests.result }}"
          echo "- Docker Compose Validation: ${{ needs.docker-compose-validation.result }}"
          echo "- Nginx Validation: ${{ needs.nginx-validation.result }}"
          echo ""

          # Count successes
          success_count=0
          total_count=5

          for result in "${{ needs.integration-tests.result }}" "${{ needs.performance-tests.result }}" "${{ needs.validation-tests.result }}" "${{ needs.docker-compose-validation.result }}" "${{ needs.nginx-validation.result }}"; do
            if [ "$result" = "success" ]; then
              success_count=$((success_count + 1))
            fi
          done

          echo "Overall Success Rate: $success_count/$total_count"

          if [ $success_count -eq $total_count ]; then
            echo "üéâ All integration and performance tests passed!"
            exit 0
          else
            echo "‚ùå Some test suites failed"
            exit 1
          fi

  # =============================================================================
  # LOCAL TEST DOCUMENTATION
  # =============================================================================
  document-local-tests:
    name: Document Local-Only Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Document local test capabilities
        run: |
          echo "üìã Local-Only Test Documentation"
          echo "================================"
          echo ""
          echo "The following tests require Docker and are NOT run in CI/CD:"
          echo ""

          if [ -f "scripts/run_local_tests.sh" ]; then
            echo "üè† Local Test Runner Available:"
            echo "   scripts/run_local_tests.sh"
            echo ""
            echo "Local test capabilities:"
            echo "- Real Docker container deployment"
            echo "- Service accessibility testing"
            echo "- Inter-service communication"
            echo "- Resource usage monitoring"
            echo "- Container health checks"
            echo "- Multi-machine testing (with test_machines.env)"
            echo ""
            echo "To run local tests:"
            echo "  ./scripts/run_local_tests.sh"
            echo "  ./scripts/run_local_tests.sh --help"
            echo ""
          fi

          if [ -d "tests/local" ]; then
            echo "üìÅ Local test files:"
            find tests/local -name "*.bats" -type f || echo "   No local test files found"
          fi

          echo ""
          echo "‚ÑπÔ∏è  Local tests complement CI/CD tests by providing real-world validation"
