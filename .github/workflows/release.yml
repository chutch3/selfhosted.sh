name: Release

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install BATS
        run: |
          sudo apt-get update
          sudo apt-get install -y bats

      - name: Install dependencies
        run: task install

      - name: Run all checks
        run: task check

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run Semantic Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          poetry run semantic-release version --print > .version.txt 2>/dev/null || echo "0.0.0" > .version.txt
          if [ "$(cat .version.txt)" != "0.0.0" ]; then
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=$(cat .version.txt)" >> $GITHUB_OUTPUT
            echo "tag=v$(cat .version.txt)" >> $GITHUB_OUTPUT
            poetry run semantic-release publish
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "No release necessary"
          fi

  update-lock:
    name: Update Poetry Lock
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Update Poetry lock file
        run: |
          poetry lock --no-update
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git diff --name-only)" ]; then
            git add poetry.lock
            git commit -m "chore: update poetry.lock after release"
            git push
          fi
